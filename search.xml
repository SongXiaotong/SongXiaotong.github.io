<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[软件项目过程模型与规划]]></title>
    <url>%2F2019%2F03%2F13%2Fsystem-design-hw3%2F</url>
    <content type="text"><![CDATA[瀑布模型、增量模型、螺旋模型（含原型方法）的优缺点 瀑布模型 （1） 优点 ​ a） 瀑布模型的流程符合客观的开发方式 ​ b） 有利于软件开发方法和工具的研究，从而提高了大型软件项目开发的质量和效率。 ​ c） 理论上当前一阶段的工作完成，人们只需要关注后续的部分 （2） 缺点 ​ a）瀑布模型的各个环节前后相连， 开发过程不能逆转，出现调整时代价过大 ​ b）模型要求需求明确，但是往往客户无法给出精确的需求，真正的开发过程也很难完全按照流程进行 ​ c） 软件成品要开发结束才可以拿到，期间很难做出即时的反馈，比较考验客户的耐心，难以及时沟通解决问题 ​ d）开发的不同阶段里，知识技能的需求不同，人员数量要求不同 增量模型 （1） 优点 ​ a）将很大的工作量划分为小的增量，减小了开发者压力 ​ b）每次增量发布都有可操作的产品产出，前一个产出的市场反应可以对后续的产品发展方向提出建议 ​ c） 人员分配灵活，可以依据增量难度进行合理的调配 ​ d）有利于开发进度的控制 ​ e）降低了失败和更改需求的风险 ​ f）降低了有预算超出的风险 （2）缺点 ​ a）增量模型需要在开发的阶段同时进行修改，软件的整体性容易被破坏 ​ b）当增量之间出现关联，要求前一个版本要为后方定制合适的接口 螺旋模型 （1）优点 ​ a）每次交付都能得到用户的反馈，不需十分明确的需求 ​ b）项目灵活，便于应对不断变更的需求 ​ c）客户始终具有一定的项目参与度，便于开发组与客户之间的沟通 ​ d）用小的分段构造大型系统，成本计算相对容易 （2）缺点 ​ a）迭代次数难以控制，存在预算超出的风险 ​ b）不适合大团队 ​ c）难以确定发布的日期 统一过程三大特点，及与面向对象的方法的关系三大特点： 统一过程是用例驱动的：用例图要求我们站在用户的角度出发，从用户的价值层面考虑问题。同时还可以驱动系统设计、实现和测试的进行，也就是说用例可以驱动开发过程。 统一过程是以架构为中心的：软件系统的构架是从不同的角度描述即将构造的系统，它刻画了系统的整体设计，去掉了细节部分，突出了系统的重要特性。明确和可以进化的架构是用例实现的基础，所以架构必须是实现统一过程的中心。 统一过程是迭代和增量的过程：软件开发是一个复杂的过程，受控的迭代可以用来处理用例，是提高软件开发效率的关键，迭代和增量使软件开发阶段性展开，对于用例的实现做出了控制和协调。与面向对象方法的关系 统一过程本身已经成为一种流行的构造面向对象系统的迭代软件开发过程。可以说，统一过程就是一个将面向对象方法实际应用于软件开发流程的一个过程准则。在开发过程中强调对对象的描述和用例的实现，从而完成对于软件对象的定义和他们的协作模式。 统一过程四个阶段的划分，以及每个阶段的里程碑UP项目将其工作和迭代组织为四个主要阶段： 初始：大体上的构想、业务案例、范围和模糊评估 细化：已精化的构想、核心架构的迭代实现、高风险的解决、确定大多数需求和范围以及进行更为实际的评估 构造：对遗留下来的风险较低和比较简单的元素进行迭代实现，准备部署 移交：进行beta测试和部署 这四个阶段的里程碑如下： 目标（生命周期目标）里程碑：目标里程碑对应初始阶段的结束，初始阶段的重点在于业务建模和需求工作，此时，开发者应该可以明确软件系统的目标和范围 架构（生命周期体系结构）里程碑：架构里程碑对应细化阶段的结束，细化阶段的重点在于设计工作，此时，开发者需要已经确定稳定的系统架构 能力（初始运行能力）里程碑：能力里程碑对应构造阶段的技术，构造阶段的重点在于实施和测试方面，此时，系统应该达到足够的稳定性和成熟性 发布（产品发布）里程碑：发布里程碑对应移交阶段的结束，移交阶段主要进行重构、修改、测试以及部署等工作，此时，需要完成系统发布和用户培训等工作 软件企业为什么能按固定节奏生产、固定周期发布软件产品？它给企业项目管理带来哪些好处统一过程模型中，各个阶段的生命周期是有固定长度的，在固定的周期内，所要完成的科目也是有明确的规范的， 因此在产品的的迭代开发过程有较为明确的时间限制的，企业能够按照统一过程的标准，按固定周期完成产品的生产和发布。 此时，根据固定周期的开发任务以及阶段，企业可以更加便利地掌控开发进度以及控制预算， 对产品的质量和生产开发过程都能进行较为精准的把控，方便企业根据实际情况做出调整，规范管理，从而尽可能达到最大的收益。]]></content>
      <categories>
        <category>system-design</category>
      </categories>
      <tags>
        <tag>homework</tag>
        <tag>points</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件的本质与软件工程科学(2)]]></title>
    <url>%2F2019%2F03%2F07%2Fhw2%2F</url>
    <content type="text"><![CDATA[知识点 用简短语言给出分析与设计的理解 分析与设计的过程就是对客户提出的需求进行系统的研究，并在研究过程中对其进行精简和整理，分析过后得到可行的有价值的需求版本，然后再对其进行具体的功能与界面的设计，从而提出软件制品的可行方案。 一句话描述面向对象的分析与设计的优势 面向对象的分析与设计从客观事物的角度出发，对事物进行属性分类与行为描述，符合人为思考方式，项目的实现方式与可理解性简单。 简述UML（统一建模语言）的作用以及考试范围 UML用于将OOA（面向对象分析）与OOD（面向对象设计）用统一的符号表示出来，能够准确地呈现对象之间的关联关系以及自身行为。作为一种语言，UML能够展示项目结构，帮助项目参与者更好地理解项目。 考试的时候我们比较关注的图是用例图、静态图【类图、对象图、包图】、行为图【交互图（循序图、合作图），状态图，活动图】、实现图【构件图、部署图】 从软件的本质角度来看，软件范围（需求）控制的可行性 软件具有复杂性、一致性、可变性、不可视性。软件开发本身具有可变性，而任何微小的需求变化都可能对软件的设计开发造成很大的影响，会影响软甲开发的难度，提高复杂性，如果不对软件的需求做出控制，会无意义地增加开发难度，对软件制品的质量产生负面效果，所以控制软件需求是必须的。 在需求分析与设计的过程中，我们可以围绕软件开发的复杂性，对现有的需求进行评估，同时围绕软件开发的成本进行调控，并对其可变和不可视的环境变化，也就是意外改动进行一致性的冗余设计，由此可以使得软件生产的预算、工期、意外变化等在一定程度都在我们的掌控之中 团队kanban由于在团队中负责产品及项目管理，所以我在项目中创建了4个project用于Kanban管理，分别是前端，后台，UI和项目管理，分别由前端、后端、UI和产品方面负责的同学进行运行和维护，具体的内容在项目的readme中也有解释 一共有两种类型的列设置，一种项目管理用的management，分别有todo、in progress、need review和done，分别表示待办、进行中、待查和已完成 另一种是UI/frontend/backend三个部分的看板，分别有needtriage、high priority、in progress和close，分别表示待办、高优先级待办、进行中和已结束 UMLet绘制练习练习1：UML和模式应用（第三版）P193_图16-17 单实例类 右上角拖拽类图到左侧工作区 修改类名称：右上角添加1表示仅创建一个实例（可选） 修改类属性：属性开头结尾添加下划线 _ ，该属性呈现下划线效果 修改类方法：方法开头结尾添加下划线 _ ，该方法呈现下划线效果 练习2：UML和模式应用（第三版）P193_图16-16 关联类 拖拽类到工作区并修改内容 拖拽实线到工作区，properties改为 lt=- r1= r2= Employs 拖拽虚线到工作区，properties改为 lt=.]]></content>
      <categories>
        <category>system-design</category>
      </categories>
      <tags>
        <tag>homework</tag>
        <tag>points</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Min Edit Distance——最短编辑距离]]></title>
    <url>%2F2019%2F03%2F06%2FMin-Edit-Distance%2F</url>
    <content type="text"><![CDATA[用例问：最少操作多少次可以把字符串T变为S？例：S=“ABCF”，T=“DBFG”则可以 把D替换为A 删掉G 插入C 最短编辑距离概念给定两个字符串S和T，对于T，我们允许如下三个操作 在任意位置添加任一字符 删除存在的任一字符 修改任一字符 将字符串T转换成成字符串S所使用的操作次数就是编辑距离，其中，最少的操作次数就是最短编辑距离（Min Edit Distance） 算法逻辑详解向S和T中分别插入字符-，使得两个字符串相同字符尽量对齐，且两个字符串最终长度相同 如果S，T对应位置都是相同的普通字符，则不扣分，如位置2、4 如果S，T对应位置都是普通字符但不相同，则扣1分（对应修改操作），如位置1 如果S的位置为-，但是T位置是不同字符，则扣1分（对应删除操作），如位置5 如果S的位置为普通字符，但是T位置为-，则扣1分（对应增加操作），如位置3 设f(i, j)表示字符串S的前i位和T的前j位对齐后的最少扣分，则最后一位的对齐情况为 当S[i] == T[j] 时，前i-1和j-1位已经完成对齐，此时最小扣分为f(i-1, j-1) 当S[i] != T[j]时，此时最少扣分为f(i-1, j-1)+1 当S前i位和T的前j-1位已经对齐，此时最少扣分为f(i, j-1)+1 当S前i-1位和T的前j位对齐，此时最少扣分为f(i-1, j)+1 定义一个函数same(i, j)，如果S[i] == T[j]则为0表示不扣分，否则为1也就是扣分，此时f的递推表达式如下 f(i, j) = min{ f(i-1, j-1)+same(i-1, j-1), f(i-1, j)+1, f(i, j-1)+1} 初始值：f(0, j) = j, f(i, 0) = i 动态规划算法定义一个矩阵dp[m][n], 其中m=len(string1)+1，n=len(string2)+1，+1是为了避免长度为0；dp[i][j]为string1的前i个字符构成的字符串，与string2的前j个字符构成的字符串的编辑距离。 插入操作：在string1的前i个字符后插入一个新的字符，使得插入的字符等于新加入的string2[j]，插入操作对于string1来说，i没有前进，但是对于string2来说，j前进了一位，也就是说，dp[i][j] = dp[i]dp[j-1]+1 删除操作：在string1的第i个字符后删除一个字符，使得删除后的字符串string1[:i-1]与word[:j]相同，那么删除操作对于原string2来说，j没有前进，但是i前进了一位，也就是说，dp[i][j] = dp[i-1][j]+(0/1) 伪代码123456789101112131415# 初始化过程for j=0 to n do f[j] = jendfor# 连续处理for i=1 to m do last = f[0] f[0] = i for j=1 to n do temp = f[i, j] f[i, j] = min(last+same(i, 1), remp+1, temp+1, f[j-1]+1) last = temp endforendfor]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件的本质与软件工程科学]]></title>
    <url>%2F2019%2F02%2F27%2Fhw1%2F</url>
    <content type="text"><![CDATA[软件工程a) 软件工程是指将系统化、规范化、可度量的方法应用于软件的开发、运行和维护中，即，将工程化的方法应用于软件。b) 同时，针对上述行为的相关方法的研究也是软件工程。 软件危机a) 本质原因：是计算机的发展导致了软件危机，软件具有复杂性、一致性、不可变性、可视性的本质特点，落后的软件生产方式无法满足计算机的迅速发展 b) 表现：开发和维护软件的过程中出现一系列的问题，如：开发进度难以预测、开发成本难以预测、因前期规划不善从而影响软件质量、软件产品缺少相应的文档、难以维护等 c) 克服软件危机的方法：软件工程构建了生产软件的方法与知识体系，其目标就是克服软件危机。从实践的角度，软件工程实践包括过程、方法、工具三个要素，是软件开发的最佳实践指南，当对软件开发 软件生命周期软件生命周期是指在时间维度，对软件项目任务进行划分，又成为软件开发过程。常见有瀑布模型、螺旋模型、敏捷的模型等。 瀑布模型：按照工程次序安排开发周期，将周期分为制定计划、需求分析、软件设计、程序编写、软件测试和运行维护等六个基本活动，规定其次序并产生循环反馈 螺旋模型：该模型是快速原型法，以进化的开发方式为中心，在每个项目阶段使用瀑布模型法。这种模型的每一个周期都包括需求定义、风险分析、工程实现和评审4个阶段，由这4个阶段进行迭代。在每一个开发阶段前引入一个非常严格的风险识别、风险分析和风险控制，它把软件项目分解成一个个小项目。每个小项目都标识一个或多个主要风险，直到所有的主要风险因素都被确定。 敏捷模型：敏捷开发以用户的需求进化为核心，最紧要的需求会被优先考虑实现，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。 火车模型：发布周期固定，每个新特性启用独立的发布火车（固定的“发车”时间，特性的状态取决于该特性是否赶上最近的火车发车时间） SWEBoK 的 15 个知识域【软件工程实践】 software requirements：软件需求，指软件产品的需求和约束，要对软件需求进行引出、商议、分析、规范和确认，保证产品的完整 software design：软件设计，指分析软件需求后，对软件制品或系统的结构、组件、接口以及其他特性做出设计和定义 software constuction：软件开发，指通过详细的设计、编码、单元测试、集成测试、调试以及验证的过程来完成开发的过程 software testing：软件测试，指通过检测行为发现当前制品的缺陷并进行改进，从而提高软件质量的行为 software maintenance：软件维护，指增强现有的软件功能、修复软件缺陷，以及使软件适应新的修改过的操作环境的过程，即软件产品的完善和迭代 software configuration management：软件配置管理，识别系统配置，从而控制配置的更改，在整个软件生命周期中保持其配置的完整性和可追溯性，包括软件配置识别、控制、状态核算、审核、软件发布管理和交付、软件配置管理工具 software engineering management：软件工程管理，指计划、协调、测量、报告和控制项目或程序，以确保软件的开发和维护是系统的、有纪律的和量化的 sofeware engineering process：软件工程过程，指对软件周期过程的定义、实现、评估、测量、管理和改进，包括过程（软件生命周期模型和过程、过程定义注释、过程适应和过程自动化）、方法（过程测量、产品测量、测量技术和测量结果质量）、工具三个方面 software engineering models and methods：软件工程模型和方法，指在不同生命周期阶段的方法，如建模、模型类型、分析、软件开发方法 software quality：软件质量，指一种软件生命周期问题，包括软件质量基础、软件质量管理过程以及实用性考量 software engineering professional practice：软件工程专业实践，指软件工程师以专业、负责和到的的方式时间软件工程所必须具备的知识、技能和态度，包括专业性、道德规范、群体动力学、沟通技巧 【软件工程基础教育】 software engineering economics：软件工程经济学，指在业务环境中作出决策，以使技术决策与组织的业务目标保持一致，包括软件工程经济学基础、非盈利决策、估算经济风险和不确定性、多属性决策 computing foundations：计算机基础，指软件工程实践必需的计算机能力，包括问题解决技术、抽象、算法和复杂性、编程基础、并行和分布式计算基础、计算机组织、操作系统以及网络通信 mathematical foundations：数学基础，指软件工程实践必需的数学能力背景，包括集合、关系和函数、基本命题和谓词逻辑、证明技术、图和树、离散概率、语法和有限状态机、数论 engineering foundations：工程基础，指软件工程实践必需的工程背景，包括经验方法和实验技术、统计分析、测量和度量、工程设计、模拟和建模、根本原因分析 CMMI 的五个级别Level 1 - Initail：无序，自发生产模型 Level 2 - Managed：项目流程特征，反应性 Level 3 - Defined：组织标准过程，可视性 Level 4 - Quantitatively Managed：测量和控制，定量的 Level 5 - Optimizing：优化和改进 SWEBokSWEBok（software engineering body of knowledge），软件工程知识体系，是IEEE Computer Society 建立的软件生产的最佳实践与相关知识的框架，指导了软件工程人才的培养与学科建设。SWEBok分为两个部分，分别是软件工程实践和软件工程基础教育，分别下设了11个和4个知识领域。 软件工程实践部分对于软件开发的流程规范进行了研究，对开发过程管理行为做出了方向性的指引，对软件开发过程中的专业性和完整性进行了分析，同时也对软件制品质量做出了保证。 软件工程基础教育部分对软件开发从业者的能力背景提出了要求，分别从经济学逻辑、计算机基础、数学基础以及工程基础对从业者做出了规范，对于学科建设和人才培养提出了具有建设性的意见。 CMMICMMI（Capability Maturity Model for Software / CMM），软件能力成熟度模型，是衡量企业能力成熟与否的模型工具。它一共分为五个层级，分别是初始级、可管理级、已定义级、量化管理级和优化管理级。 软件能力成熟度模型为企业软件工程能力的评估提出了明确的标准，根据团体能力上限的不同自底向上划分出了不同的层级，便于我们准确客观地评测企业能力。 而与此同时，CMMI的层级划分也为企业的未来发展及自身完善明确了方向，根据能力成熟度模型的层级标准，各个企业可以对自身的软件工程流程做出更加严格专业的规范，从而提高其自身能力和竞争力。]]></content>
      <categories>
        <category>system-design</category>
      </categories>
      <tags>
        <tag>homework</tag>
        <tag>points</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo]]></title>
    <url>%2F2019%2F02%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
